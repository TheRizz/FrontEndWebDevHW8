{"version":3,"sources":["index.js"],"names":["groupColumn","cells","document","getElementsByClassName","r","c","classList","add","toString","Game","React","Component","props","state","player1","player2","currentPlayer","board","gameOver","message","history","squares","Array","fill","play","bind","row","push","setState","console","log","result","checkAll","togglePlayer","checkVertical","checkDiagonalRight","checkDiagonalLeft","checkHorizontal","checkDraw","initBoard","concat","map","i","Row","cell","Cell","value","columnIndex","color","ReactDOM","render","getElementById"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["function groupColumn(){\r\n    var cells = document.getElementsByClassName('cell');\r\n    for(var r = 0; r < 6; r++){\r\n      for(var c = 0; c < 7; c++){\r\n        cells[c + (r * 7)].classList.add(\"Col\"+(c+1).toString());\r\n      }\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n      this.state = {\r\n        player1: 1,\r\n        player2: 2,\r\n        currentPlayer: null,\r\n        board: [],\r\n        gameOver: false,\r\n        message: '',\r\n        history:[{\r\n          squares: Array(42).fill(null),\r\n        }]\r\n      };\r\n      \r\n      // Bind play function to App component\r\n      this.play = this.play.bind(this);\r\n    }\r\n    \r\n    // Starts new game\r\n    initBoard() {\r\n      // Create a blank 6x7 matrix\r\n      let board = [];\r\n      for (let r = 0; r < 6; r++) {\r\n        let row = [];\r\n        for (let c = 0; c < 7; c++) { row.push(null) }\r\n        board.push(row);\r\n      }\r\n      \r\n      this.setState({\r\n        board,\r\n        currentPlayer: this.state.player1,\r\n        gameOver: false,\r\n        message: ''\r\n      });\r\n    }\r\n    \r\n    togglePlayer() {\r\n      return (this.state.currentPlayer === this.state.player1) ? this.state.player2 : this.state.player1;\r\n    }\r\n    \r\n    play(c) {\r\n      if (!this.state.gameOver) {\r\n        // Place piece on board\r\n        let board = this.state.board;\r\n        for (let r = 5; r >= 0; r--) {\r\n          if (!board[r][c]) {\r\n            board[r][c] = this.state.currentPlayer;\r\n            console.log(\"row: \", r + 1, \", col: \", c + 1);\r\n            break;\r\n          }\r\n        }\r\n  \r\n        // Check status of board\r\n        let result = this.checkAll(board);\r\n        if (result === this.state.player1) {\r\n          this.setState({ board, gameOver: true, message: 'Player 1 (red) wins!' });\r\n        } else if (result === this.state.player2) {\r\n          this.setState({ board, gameOver: true, message: 'Player 2 (yellow) wins!' });\r\n        } else if (result === 'draw') {\r\n          this.setState({ board, gameOver: true, message: 'Draw game.' });\r\n        } else {\r\n          this.setState({ board, currentPlayer: this.togglePlayer() });\r\n        }\r\n      } else {\r\n        this.setState({ message: 'Game over. Please start a new game.' });\r\n      }\r\n    }\r\n    \r\n    checkVertical(board) {\r\n      // Check only if row is 3 or greater\r\n      for (let r = 3; r < 6; r++) {\r\n        for (let c = 0; c < 7; c++) {\r\n          if (board[r][c]) {\r\n            if (board[r][c] === board[r - 1][c] &&\r\n                board[r][c] === board[r - 2][c] &&\r\n                board[r][c] === board[r - 3][c]) {\r\n              return board[r][c];    \r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    checkHorizontal(board) {\r\n      // Check only if column is 3 or less\r\n      for (let r = 0; r < 6; r++) {\r\n        for (let c = 0; c < 4; c++) {\r\n          if (board[r][c]) {\r\n            if (board[r][c] === board[r][c + 1] && \r\n                board[r][c] === board[r][c + 2] &&\r\n                board[r][c] === board[r][c + 3]) {\r\n              return board[r][c];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    checkDiagonalRight(board) {\r\n      // Check only if row is 3 or greater AND column is 3 or less\r\n      for (let r = 3; r < 6; r++) {\r\n        for (let c = 0; c < 4; c++) {\r\n          if (board[r][c]) {\r\n            if (board[r][c] === board[r - 1][c + 1] &&\r\n                board[r][c] === board[r - 2][c + 2] &&\r\n                board[r][c] === board[r - 3][c + 3]) {\r\n              return board[r][c];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    checkDiagonalLeft(board) {\r\n      // Check only if row is 3 or greater AND column is 3 or greater\r\n      for (let r = 3; r < 6; r++) {\r\n        for (let c = 3; c < 7; c++) {\r\n          if (board[r][c]) {\r\n            if (board[r][c] === board[r - 1][c - 1] &&\r\n                board[r][c] === board[r - 2][c - 2] &&\r\n                board[r][c] === board[r - 3][c - 3]) {\r\n              return board[r][c];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    checkDraw(board) {\r\n      for (let r = 0; r < 6; r++) {\r\n        for (let c = 0; c < 7; c++) {\r\n          if (board[r][c] === null) {\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      return 'draw';    \r\n    }\r\n    \r\n    checkAll(board) {\r\n      return this.checkVertical(board) || this.checkDiagonalRight(board) || this.checkDiagonalLeft(board) || this.checkHorizontal(board) || this.checkDraw(board);\r\n    }\r\n    \r\n    componentWillMount() {\r\n      this.initBoard();\r\n    }\r\n    \r\n    render() {\r\n      let history = this.state.history;\r\n      \r\n      history = history.concat([{\r\n        squares: this.state.board                      \r\n      }]);\r\n      \r\n      console.log(history);\r\n      \r\n      return (\r\n        <div>\r\n          <div className=\"button\" onClick={() => {this.initBoard()}}>New Game</div>\r\n          \r\n          <table>\r\n            <thead>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.board.map((row, i) => (<Row key={i} row={row} play={this.play} />))}\r\n            </tbody>\r\n          </table>\r\n          \r\n          <p className=\"message\">{this.state.message}\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // Row component\r\n  const Row = ({ row, play }) => {\r\n    return (\r\n      <tr>\r\n        {row.map((cell, i) => <Cell key={i} value={cell} columnIndex={i} play={play} />)}\r\n      </tr>\r\n    );\r\n  };\r\n  \r\n  const Cell = ({ value, columnIndex, play }) => {\r\n    let color = 'white';\r\n    if (value === 1) {\r\n      color = 'red';\r\n    } else if (value === 2) {\r\n      color = 'yellow';\r\n    }\r\n    \r\n    return (\r\n      <td>\r\n        <div className=\"cell\" onClick={() => {play(columnIndex)}}>\r\n          <div className={color}></div>\r\n        </div>\r\n      </td>\r\n    );\r\n  };\r\n  //onMouseOver={() => {highlight(columnIndex)}}>\r\n  ReactDOM.render(<Game />, document.getElementById('main'));\r\n  groupColumn();"]}